import argparse
from settings import *

# parse arg
parser = argparse.ArgumentParser(description='Process hyperparameters.')
parser.add_argument('--lr', type=float, dest='lr', action='store', default=LEARNING_RATE, help='learning rate')
parser.add_argument('--ct', type=int, dest='ct', action='store', default=CONTEXT_SIZE)
parser.add_argument('--th', type=float, dest='th', action='store', default=LABEL_TH)
parser.add_argument('--ep', type=int, dest='ep', action='store', default=1)
parser.add_argument('--pr', type=int, dest='pr', action='store', default=PRINT_EVERY)
parser.add_argument('--sem', type=str, dest='sem', action='store', default=SEM_METHOD)
parser.add_argument('--glove', type=int, dest='glove', action='store', default=GLOVE_DIM)
parser.add_argument('-submit', action='store_true')
parser.add_argument('-no_split', action='store_true')
parser.add_argument('-no_feature', action='store_true')
parser.add_argument('-test', action='store_true')
parser.add_argument('-toy', action='store_true')
parser.add_argument('-ran', action='store_true')
parser.add_argument('-only_load', action='store_true')
parser.add_argument('-sem_rnn', action='store_true')
parser.add_argument('-use_cuda', action='store_false', default=True)
parser.add_argument('-load_glove', action='store_true', default=False)
parser.add_argument('-nodecay', action='store_true')
parser.add_argument('--data', type=str, dest='data', action='store', default='all')
parser.add_argument('--pat', type=int, dest='pat', action='store', default=DECAY_PATIENCE)
parser.add_argument('--dp', type=float, dest='dp', action='store', default=DROPOUT_P)
parser.add_argument('--l2', type=float, dest='l2', action='store', default=L2_NORM)
parser.add_argument('--dr', type=float, dest='dr', action='store', default=DECAY_RATE)
parser.add_argument('--ff', type=int, dest='ff', action='store', default=FF_HIDDEN_SIZE)
parser.add_argument('--hs', type=int, dest='hs', action='store', default=HIDDEN_SIZE)
parser.add_argument('--ae', type=int, dest='ae', action='store', default=1)
parser.add_argument('--de', type=int, dest='de', action='store', default=1)
parser.add_argument('--me', type=int, dest='me', action='store', default=1)
parser.add_argument('--start_ep', type=int, dest='start_ep', action='store', default=0)
parser.add_argument('-check', action='store_true', default=False)
parser.add_argument('--resume', type=str, dest='resume', action='store', default=False)
parser.add_argument('--movie_sample', type=float, dest='movie_sample', action='store', default=MOVIE_SAMPLE)
parser.add_argument('-movie', action='store_true')
parser.add_argument('-mix_movie', action='store_true')
parser.add_argument('--tf_ratio', type=float, dest='tf_ratio', action='store', default=TF_RATIO)
parser.add_argument('--split_p', type=float, dest='split_p', action='store', default=SPLIT_P)
parser.add_argument('--criterion',type=str,dest='criterion', action='store', default='mse')
parser.add_argument('-not_use_attention', action='store_true', default=False)

args = parser.parse_args()
print("settings: epoch {}/lr {}/sem {}/movie_sample {}/cont {}/pr {}/glove {}/pat {}/dp {}/hidden_size {}/chk {}/resume {}".format(args.ep, args.lr, args.sem, args.movie_sample, args.ct, args.pr, args.glove, args.pat, args.dp, args.hs, args.check, args.resume))
